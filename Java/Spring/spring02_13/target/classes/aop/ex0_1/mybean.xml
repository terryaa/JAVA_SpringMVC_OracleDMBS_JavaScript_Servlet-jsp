<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
<context:annotation-config/>
	<!-- taget빈 생성 -->
	<bean id="target" class="aop.ex0_1.MyBeanImple"/>
	<!-- Advice 빈 생성 -->
	<bean id="LoggerBeforeAdvice" class="aop.ex0_1.MyBeanBeforeAdvice"/>
	<bean id="LoggerAfterAdvice" class="aop.ex0_1.MyAfterAdvice"/>
	<!--  execution(리턴타입 , 패키지경로 , 클래스명 , 메서드명 , 매개변수)
//	ex)   *, kr.or.kosta.mvc.. , *imple, *(..) ,  
//	()-> 인자가 하나도 없는 메서드만 지칭
//	(..) -> 인자가 없거나 하나이상인 메서드=>모든 메서드  ==>정규표현식
//	-->
	<bean id="LoggerPointCut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">
		<property name="expression" value="execution(* myGet*(..))"></property>
	</bean>
	
	<bean id="LoggerAfterAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice" ref="LoggerAfterAdvice"></property>
		<property name="pointcut" ref="LoggerPointCut"></property>
	</bean>
	<bean id="LoggerAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice" ref="LoggerBeforeAdvice"/>
		<property name="pointcut" ref="LoggerPointCut"></property>
	</bean>
	<bean id="pfBean"
	class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="target"></property>
		<property name="interceptorNames">
			<list>
				<value>LoggerAdvisor</value>
				<value>LoggerAfterAdvisor</value>
			</list>
		</property>
	</bean>

</beans>
